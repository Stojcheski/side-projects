# Salesforce CI/CD Pipeline - Deploy to UAT Environment
# This workflow runs when code is merged into the develop branch
# It performs delta deployment to UAT org with comprehensive testing and quality checks

name: 'Deploy to UAT'

# Trigger: Run when code is pushed to develop branch (after PR merge)
on:
  push:
    branches: [develop]
    # Only run when there are changes in the force-app directory
    paths:
      - 'force-app/**'

# Prevent multiple deployments from running simultaneously
# This ensures we don't have conflicts in the UAT org
concurrency:
  group: deploy-uat
  cancel-in-progress: false

# Define the deployment job
jobs:
  deploy-to-uat:
    name: 'Deploy Delta Changes to UAT'
    runs-on: ubuntu-latest
    
    # Set timeout to 60 minutes as requested
    timeout-minutes: 60
    
    # Skip if the push was made by dependabot
    if: ${{ github.actor != 'dependabot[bot]' }}
    
    steps:
      # Step 1: Setup the environment
      - name: 'Setup Environment'
        run: |
          echo "Starting deployment pipeline for commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"

      # Step 2: Checkout the source code
      # fetch-depth: 0 is crucial for sfdx-git-delta to work properly
      # It downloads the complete git history so we can compare commits
      - name: 'Checkout Source Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # This ensures we have access to all git history for delta comparison

      # Step 3: Setup Node.js environment
      # Salesforce CLI requires Node.js to run
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Remove cache since we don't have package-lock.json in this repo yet

      # Step 4: Install Salesforce CLI
      # We use the modern SF CLI instead of the legacy SFDX CLI
      - name: 'Install Salesforce CLI'
        run: |
          echo "Installing Salesforce CLI..."
          npm install --global @salesforce/cli
          sf --version
          echo "Salesforce CLI installed successfully"

      # Step 5: Install required CLI plugins
      - name: 'Install CLI Plugins'
        run: |
          echo "Installing sfdx-git-delta for delta deployments..."
          sf plugins install sfdx-git-delta
          
          echo "Installing Salesforce Code Analyzer for static analysis..."
          sf plugins install @salesforce/sfdx-scanner
          
          echo "Installed plugins:"
          sf plugins --core

      # Step 6: Create authentication file
      # We store the auth URL in a temporary file for security
      - name: 'Setup Authentication'
        run: |
          echo "${{ secrets.SF_UAT_AUTH_URL }}" > ./authfile.txt
          echo "Authentication file created"

      # Step 7: Authenticate to UAT org
      - name: 'Authenticate to UAT Org'
        run: |
          echo "Authenticating to UAT environment..."
          sf org login sfdx-url --sfdx-url-file ./authfile.txt --alias uat-org --set-default
          
          echo "Verifying org connection..."
          sf org display --target-org uat-org
          
          echo "Successfully authenticated to UAT org"

      # Step 8: Generate delta package using sfdx-git-delta
      # This creates a package.xml with only the changed metadata
      - name: 'Generate Delta Package'
        run: |
          echo "Analyzing changes between commits..."
          
          # Create directory for delta deployment
          mkdir delta-deploy
          
          # Generate delta package comparing current commit with previous commit
          # --from HEAD~1: Previous commit
          # --to HEAD: Current commit  
          # --output: Where to store the delta package
          # --generate-delta: Create package.xml for changed metadata
          # --source: Source directory to analyze
          sf sgd source delta --from "HEAD~1" --to "HEAD" --output ./delta-deploy --generate-delta --source force-app/
          
          echo "Delta package contents:"
          if [ -d "./delta-deploy/force-app" ]; then
            find ./delta-deploy/force-app -type f -name "*.xml" -o -name "*.cls" -o -name "*.js" -o -name "*.html" | head -20
            echo "Generated package.xml:"
            cat ./delta-deploy/package/package.xml 2>/dev/null || echo "No package.xml generated (no changes detected)"
          else
            echo "No changes detected in force-app directory"
          fi

      # Step 9: Check if there are any changes to deploy
      - name: 'Validate Changes Detected'
        id: check-changes
        run: |
          if [ -d "./delta-deploy/force-app" ] && [ "$(find ./delta-deploy/force-app -type f | wc -l)" -gt 0 ]; then
            echo "changes-detected=true" >> $GITHUB_OUTPUT
            echo "Changes detected - proceeding with deployment"
          else
            echo "changes-detected=false" >> $GITHUB_OUTPUT
            echo "No metadata changes detected - skipping deployment"
          fi

      # Step 10: Code Quality - Prettier Format Check
      # This ensures all code follows consistent formatting standards
      - name: 'Check Code Formatting (Prettier)'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          echo "Checking code formatting with Prettier..."
          
          # Install dependencies if package.json exists
          if [ -f "package.json" ]; then
            npm ci
          fi
          
          # Check formatting - this will fail if files are not properly formatted
          npx prettier --check "**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}" || {
            echo "Code formatting check failed!"
            echo "Run 'npm run prettier' locally to fix formatting issues"
            exit 1
          }
          
          echo "Code formatting check passed"

      # Step 11: Static Code Analysis
      # Run Salesforce Code Analyzer to detect code quality issues
      - name: 'Static Code Analysis'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          echo "Running static code analysis..."
          
          # Navigate to delta directory and run scanner
          cd delta-deploy
          
          # Run static analysis on changed Apex classes
          # Categories: Design, Best Practices, Performance (as requested)
          # Format: SARIF for GitHub integration
          sf scanner run \
            --format sarif \
            --target './**/*.cls' \
            --category "Design,Best Practices,Performance" \
            --outfile 'apexScanResults.sarif' \
            --severity-threshold 3 || {
            
            echo "Static analysis found errors!"
            echo "Scan results:"
            cat apexScanResults.sarif
            echo "Please fix the code quality issues before deploying"
            exit 1
          }
          
          echo "Static code analysis passed"
          
          # Show warnings if any (but don't fail)
          if [ -f "apexScanResults.sarif" ]; then
            echo "Analysis complete. Check for warnings in the results."
          fi

      # Step 12: Upload static analysis results to GitHub
      # This allows you to see code quality issues directly in GitHub
      - name: 'Upload Code Analysis Results'
        if: steps.check-changes.outputs.changes-detected == 'true' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: delta-deploy/apexScanResults.sarif
        continue-on-error: true

      # Step 13: Pre-deployment validation (Check-only deploy)
      # This validates the deployment without actually deploying to catch issues early
      - name: 'Pre-deployment Validation'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          echo "Running pre-deployment validation (check-only)..."
          
          # Perform check-only deployment with all local tests
          # This validates metadata and runs tests without actually deploying
          sf project deploy start \
            --source-dir ./delta-deploy/force-app \
            --target-org uat-org \
            --check-only \
            --test-level RunLocalTests \
            --coverage-formatters clover \
            --junit \
            --results-dir ./test-results \
            --wait 60 || {
            
            echo "Pre-deployment validation failed!"
            echo "Check the error details above"
            exit 1
          }
          
          echo "Pre-deployment validation passed"

      # Step 14: Check code coverage requirement (90%)
      - name: 'Validate Code Coverage'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          echo "Checking code coverage requirements..."
          
          # Check if coverage report exists
          if [ -f "./test-results/test-result-codecoverage.clover" ]; then
            # Extract coverage percentage from clover report
            COVERAGE=$(grep -o 'percent="[0-9.]*"' ./test-results/test-result-codecoverage.clover | head -1 | grep -o '[0-9.]*')
            
            echo "Current code coverage: ${COVERAGE}%"
            echo "Required code coverage: 90%"
            
            # Compare coverage with requirement (90%)
            if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              echo "Code coverage requirement met!"
            else
              echo "Code coverage requirement not met!"
              echo "Please add more test coverage to reach 90%"
              exit 1
            fi
          else
            echo "Could not find coverage report. Deployment will continue but please verify coverage manually."
          fi

      # Step 15: Actual deployment to UAT
      # Now we perform the actual deployment since all validations passed
      - name: 'Deploy to UAT Environment'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          echo "Starting deployment to UAT environment..."
          
          # Deploy the delta changes with all local tests
          sf project deploy start \
            --source-dir ./delta-deploy/force-app \
            --target-org uat-org \
            --test-level RunLocalTests \
            --wait 60 || {
            
            echo "Deployment to UAT failed!"
            echo "Please check the error details above"
            exit 1
          }
          
          echo "Successfully deployed to UAT environment!"

      # Step 16: Handle destructive changes (if any)
      # Deploy any destructive changes (deletions) separately
      - name: 'Deploy Destructive Changes'
        if: steps.check-changes.outputs.changes-detected == 'true'
        run: |
          if [ -d "./delta-deploy/destructiveChanges" ] && [ "$(find ./delta-deploy/destructiveChanges -name '*.xml' | wc -l)" -gt 0 ]; then
            echo "Deploying destructive changes..."
            
            sf project deploy start \
              --metadata-dir ./delta-deploy/destructiveChanges \
              --target-org uat-org \
              --wait 60 || {
              
              echo "Destructive changes deployment failed - please review manually"
              # Don't fail the entire pipeline for destructive changes
            }
            
            echo "Destructive changes processed"
          else
            echo "No destructive changes detected"
          fi

      # Step 17: Cleanup sensitive files
      - name: 'Cleanup'
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f ./authfile.txt
          echo "Cleanup completed"

      # Step 18: Save deployment artifacts
      # Save test results and logs for debugging purposes
      - name: 'Save Deployment Artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-results-${{ github.sha }}
          path: |
            ./test-results/
            ./delta-deploy/apexScanResults.sarif
          retention-days: 30

      # Step 19: Deployment Summary
      - name: 'Deployment Summary'
        if: always()
        run: |
          echo "=================================="
          echo "DEPLOYMENT SUMMARY"
          echo "=================================="
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Target Org: UAT"
          echo "Completed: $(date)"
          
          if [ "${{ steps.check-changes.outputs.changes-detected }}" == "true" ]; then
            echo "Status: Deployment completed"
          else
            echo "Status: No changes detected"
          fi
          echo "=================================="